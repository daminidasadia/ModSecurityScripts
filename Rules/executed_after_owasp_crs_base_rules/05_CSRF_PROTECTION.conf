
############################################
# CSRF protection
#
# The CSRF token is generated on 'session_initialize.lua' script.
#
# We add a random salt between the name and value of  the CSRF hidden field 
# to make side channel attacks harder.
############################################

#Enables content manipulation
SecContentInjection On
SecStreamOutBodyInspection On
SecDisableBackendCompression On

# On every POST we check if the CSRF token has been informed. 
SecRule REQUEST_METHOD "@streq POST" "id:502,phase:2,chain,block,msg:'POST request missing the CSRF token.',tag:'custom_rule', tag:'csrf_protection', severity:2"
SecRule &ARGS:CSRF_TOKEN "!@eq 1"

# On every POST we check if the CSRF token matches the one in the session. 
SecRule REQUEST_METHOD "@streq POST" "id:500,phase:2,chain,capture,t:none,block,setvar:TX.csrf_token=%{ARGS.csrf_token},msg:'Invalid CSRF token. Expected %{session.csrf_token} but received %{ARGS.csrf_token}',tag:'custom_rule', tag:'csrf_protection', severity:2"
SecRule TX:csrf_token "!@streq %{SESSION.csrf_token}"

# On valid requests we inject the CSRF token into the forms
SecRule SESSION:VALID "@eq 1" "id:501,phase:4,chain,t:none,pass,nolog"
SecRule UNIQUE_ID "(.*)"  "chain,t:md5,t:hexEncode,setvar:TX.csrf_salt=%{matched_var}"
SecRule STREAM_OUTPUT_BODY "@rsub s/<\/form>/<input type=\"hidden\" name=\"csrf_token\" id=\"%{TX.csrf_salt}\" value=\"%{session.csrf_token}\"><\/form>/"