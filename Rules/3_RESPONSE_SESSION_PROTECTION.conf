############################################
# Validates the RESPONSE for session protection.
############################################

#Enables content manipulation
SecContentInjection On
SecStreamOutBodyInspection On
SecDisableBackendCompression On

# New session generated on the equest phase (happens on our logout).
SecRule SESSION:IS_NEW "@eq 1" "id:300,chain,phase:3,t:none,pass,nolog,capture,setsid:%{TX.1}"
SecRuleScript session_initialize.lua

# Initialize the session collection when we receive the cookie from the server
SecRule RESPONSE_HEADERS:/Set-Cookie2?/ "^(?i:JSESSIONID)=(.*?);" "id:301,chain,phase:3,,t:none,pass,nolog,capture,setsid:%{TX.1}"
SecRuleScript session_initialize.lua

<Location /login>
  #If there is a redirect after the login post we undestand that it's successful and associate the user
  SecRule REQUEST_METHOD "@streq GET" "id:302,phase:3,chain,t:none,nolog,pass"
  SecRule &RESPONSE_HEADERS:Location "@eq 1" setvar:SESSION.user=%{ARGS.login}
</Location>

# After the logout we make some server/client side redirects to regenerate the session without affecting the user experience
SecRule REQUEST_URI "/logout" "id:303,phase:3,nolog,setvar:!session.user,redirect:'/?goHome'"
SecRule REQUEST_URI "^(\/\?goHome)$" "id:304,phase:4,chain,pass,nolog"
SecRule STREAM_OUTPUT_BODY "@rsub s/<head>/<head><script type=\"text\/javascript\">document.location.href=\"\/\";<\/script>/"