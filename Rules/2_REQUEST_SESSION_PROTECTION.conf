############################################
# Validates the REQUEST for session protection. All failed checks result in a forced logout.
#
# TODO: danger score / add rule ids to the audit / show message to the user after a forced logout
############################################

# No session cookie sent. The sever will generate one.
SecRule REQUEST_METHOD "!@streq POST" "id:200,phase:1,chain,pass,nolog,skipAfter:END_SESSION_REQUEST_RULES"
SecRule &REQUEST_COOKIES:JSESSIONID "@eq 0" 

# Checks if more than one session cookie is sent
SecRule &REQUEST_COOKIES:JSESSIONID "!@eq 1" "id:201,phase:1,block,redirect:'/logout',log,nolog,setvar:session.valid=0,msg:'Invalid number of session cookies sent'"

# Retreives the session id from the cookie
SecRule REQUEST_COOKIES:JSESSIONID "(.*)" "id:202,phase:1,t:none,nolog,pass,setsid:%{matched_var}"

# Skip checks if we are going to or coming from a logout
SecRule REQUEST_URI "(^\/logout$|^\/\?l$)"  "id:210,phase:1,pass,nolog,skipAfter:END_SESSION_REQUEST_RULES"

# If the session is invalid
SecRule SESSION:VALID "!@eq 1" "id:204,phase:1,t:none,block,redirect:'/logout',msg:'Invalid session received. Logging out...'"

# If the session expired (300 seconds)
SecRule SESSION:VALID "@eq 1" "id:205,phase:1,chain,t:none,block,redirect:'/logout',nolog,msg:'Session Idle for: %{tx.session_idle} seconds.',setvar:tx.session_idle=%{time_epoch},setvar:tx.session_idle=-%{session.last_update_time}"
SecRule TX:SESSION_IDLE "@gt 300" "setvar:session.valid=0"

# updates a dummy variable to reset the session idle time
SecRule SESSION:VALID "@eq 1" "id:206,phase:1,t:none,nolog,pass,setvar:session.dummy=1"

# If the IP changed during the same session
SecRule SESSION:IP "!@streq %{REMOTE_ADDR}" "id:207,phase:1,block,redirect:'/logout',setvar:session.valid=0,msg:'Session hijacking Detected: Expected IP address %{SESSION.ip} but got %{REMOTE_ADDR}'"

# If the User-Agent changed during the same session
SecRule REQUEST_HEADERS:User-Agent "(.*)" "id:208,phase:1,chain,t:none,block,redirect:'/logout',t:sha1,t:hexEncode,setvar:TX.uahash=%{matched_var},msg:'Session hijacking Detected: Expected User-Agent hash %{SESSION.uahash} but got %{TX.uahash}'"
SecRule SESSION:uahash "!@streq %{TX.uahash}" "setvar:session.valid=0"

SecMarker END_SESSION_REQUEST_RULES