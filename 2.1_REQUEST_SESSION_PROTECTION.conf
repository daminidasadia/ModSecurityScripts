############################################
# Validates the REQUEST for session protection.
#
# TODO: Pending checks: idle session / multiple sessions per user / danger score
############################################

# If there is no session cookie on the header, we skip all the session checks (will apply them once the session is created in the server)
SecRule &REQUEST_COOKIES:JSESSIONID "@eq 0" "phase:1,id:210,pass,nolog,skipAfter:END_SESSION_REQUEST_RULES"

# Validates the session
SecRule REQUEST_COOKIES:JSESSIONID "(.*)" "phase:1,id:211,t:none,nolog,pass,setsid:%{matched_var}"

# New session, we store ip and user-agent and generate a csrf token.
SecRule SESSION:IS_NEW "@eq 1" "phase:1,id:212,chain,capture,pass,nolog,setvar:SESSION.ip=%{REMOTE_ADDR},setvar:SESSION.valid=1"
SecRule REQUEST_HEADERS:User-Agent "(.*)" "chain,t:none,t:sha1,t:hexEncode,setvar:session.uahash=%{matched_var}"
SecRule UNIQUE_ID "(.*)" "t:none,t:sha1,t:hexEncode,setvar:session.csrf_token=%{matched_var}"

# Checks if the session is flagged as invalid
SecRule SESSION:VALID "!@eq 1" "phase:1,id:213,t:none,block,msg:'Session flagged as invalid: %{sessionid} %{session.valid} %{session.csrf_token}'"

# Checks for ip or user-agent changes during the session
SecRule SESSION:IP "!@streq %{REMOTE_ADDR}" "phase:2,id:214,block,msg:'Session hijacking Detected: Expected IP address .%{SESSION.ip}. but got %{REMOTE_ADDR}'"
#SecRule REQUEST_HEADERS:User-Agent "!@streq %{SESSION.uahash}" "phase:2,id:215,t:none,t:sha1,t:hexEncode,block,msg:'Session hijacking Detected: Expected User-Agent hash %{SESSION.uahash} but got %{matched_var}'"

# On every POST checks the CSRF token.
SecRule REQUEST_METHOD "@streq POST" "phase:2,id:216,chain,capture,t:none,block,setvar:TX.csrf_token=%{ARGS.csrf_token},msg:'Invalid CSRF token. Expected %{session.csrf_token} but received %{ARGS.csrf_token}'"
SecRule TX:csrf_token "!@streq %{SESSION.csrf_token}"

SecMarker END_SESSION_REQUEST_RULES
 
